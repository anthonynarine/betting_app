# Generated by Django 4.2.3 on 2023-11-04 02:37

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("api", "0003_alter_event_options_alter_member_options"),
    ]

    operations = [
        migrations.AlterField(
            model_name="event",
            name="group",
            field=models.ForeignKey(
                help_text="The group under which this event is organized.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="events",
                related_query_name="event",
                to="api.group",
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="organizer",
            field=models.ForeignKey(
                help_text="The user who is organizing the event. Can be null if the organizer is no longer a member.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="organized_events",
                related_query_name="organized_event",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="participants",
            field=models.ManyToManyField(
                blank=True,
                help_text="The users who are participating in the event.",
                related_name="attended_events",
                related_query_name="attended_event",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="team1",
            field=models.CharField(
                help_text="The name of the first team participating in the event.",
                max_length=32,
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="team1_score",
            field=models.IntegerField(
                blank=True,
                help_text="The final score for team 1. Can be left blank initially.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="team2",
            field=models.CharField(
                help_text="The name of the second team participating in the event.",
                max_length=32,
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="team2_score",
            field=models.IntegerField(
                blank=True,
                help_text="The final score for team 2. Can be left blank initially.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="event",
            name="time",
            field=models.DateTimeField(
                help_text="The scheduled start time of the event."
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="creator",
            field=models.ForeignKey(
                help_text="The user who created the group. Can be null if the creator is no longer a member.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_groups",
                related_query_name="created_group",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="description",
            field=models.TextField(
                help_text="A detailed description of the group and its purpose."
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="location",
            field=models.CharField(
                help_text="The location associated with the group.", max_length=32
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="name",
            field=models.CharField(
                help_text="The name of the group. Must be unique.",
                max_length=32,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="member",
            name="admin",
            field=models.CharField(
                choices=[("admin", "ADMIN"), ("normal", "NORMAL")],
                default="normal",
                help_text="The role of the member within the group. Defaults to 'normal'.",
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="member",
            name="group",
            field=models.ForeignKey(
                help_text="The group to which the member belongs.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="members",
                to="api.group",
            ),
        ),
        migrations.AlterField(
            model_name="member",
            name="user",
            field=models.ForeignKey(
                help_text="The user who is a member of the group.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="member_of",
                related_query_name="membership",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Bet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "team1_score",
                    models.IntegerField(
                        blank=True,
                        help_text="The predicted score for team 1. Optional.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "team2_score",
                    models.IntegerField(
                        blank=True,
                        help_text="The predicted score for team 2. Optional.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "points",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        help_text="The number of points wagered on the bet. Defaults to 0.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Pending", "Pending"),
                            ("WON", "Won"),
                            ("LOST", "Lost"),
                        ],
                        default="PENDING",
                        max_length=10,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        help_text="The event on which the bet is placed.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bets",
                        to="api.event",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user who made the bet.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_bets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "unique_together": {("user", "event")},
            },
        ),
    ]
